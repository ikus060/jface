/**
 * Copyright(C) 2013 Patrik Dufresne Service Logiciel <info@patrikdufresne.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.patrikdufresne.planner.example.data;

import java.util.Date;

/**
 * Represents the details of the frequency of which an event may occur.
 * 
 * @author Patrik Dufresne
 * 
 */

public class CalendarRecurrence {

    /**
     * Values for frequency.
     */
    public static final int DAILY = 1;

    /**
     * Values for frequency.
     */
    public static final int MONTHLY = 3;

    /**
     * Values for frequency.
     */
    public static final int WEEKLY = 2;

    /**
     * Values for frequency.
     */
    public static final int YEARLY = 4;

    /**
     * An array of strings representing the days of the week on which this
     * recurrence occurs. Possible string values are sunday, monday, tuesday,
     * wednesday, thursday, friday, and saturday. If you set bydaydays, you must
     * also set bydayfreq. For example, if bydaydays is monday and bydayfreq
     * contains 0, then the recurrence is every Monday.
     * 
     * @uml.property name="byDayDays" multiplicity="(0 -1)" dimension="1"
     */
    private String[] byDayDays;

    /**
     * An array of integer numbers used in combination with bydaydays to specify
     * which week within a month or year this recurrence occurs. For example, if
     * frequency is monthly, bydaydays is monday and byDayFreq contains 2, then
     * the recurrence will occur the second Monday of every month.
     * 
     * @uml.property name="byDayFreq" multiplicity="(0 -1)" dimension="1"
     */
    private int[] byDayFreqs;

    /**
     * An array of numbers, with integer values ranging from 1 to 31 or -31 to
     * -1, that indicate the days within a month that this recurrence occurs.
     * Negative values indicate the number of days from the last day of the
     * month.
     * 
     * @uml.property name="byMonthDay"
     */
    private int[] byMonthDays;

    /**
     * An array of numbers, with integer values ranging from 1 to 12, that
     * indicate the months within a year that this recurrence occurs.
     * 
     * @uml.property name="byMonth" multiplicity="(0 -1)" dimension="1"
     */
    private int[] byMonths;

    /**
     * An array of integer numbers used to specify specific days within an
     * expanded set of occurrences. The numbers specify the index of an expanded
     * sequence of occurrences starting with 1. For example, if frequency is
     * daily, the event or task starts on a Monday, and bysetpos is (1, 8), then
     * the recurrence will occur on the first and second Mondays only. If
     * bysetpos is (2, 8) the event or task will occur on the first Tuesday in
     * the sequence and the second Monday.
     * 
     * @uml.property name="bySetPos" multiplicity="(0 -1)" dimension="1"
     */
    private int[] bySetPos;
    /**
     * An array of numbers, with integer values ranging from 1 to 53 or -53 to
     * -1, that indicate the weeks within a year that this recurrence occurs.
     * Negative values indicate the number of weeks from the last week of the
     * year.
     * 
     * @uml.property name="byWeekNumber" multiplicity="(0 -1)" dimension="1"
     */
    private int[] byWeekNumbers;
    /**
     * An array of numbers, with integer values ranging from 1 to 366 or -366 to
     * -1, that indicate the days within a year that this recurrence occurs.
     * Negative values indicate the number of days from the last day of the
     * year.
     * 
     * @uml.property name="byYearDay" multiplicity="(0 -1)" dimension="1"
     */
    private int[] byYearDays;
    /**
     * The number of occurrences generated by this recurrence.
     * 
     * @uml.property name="count"
     */
    private int count;
    /**
     * The frequency of this recurrence specified by a constant. Possible values
     * are DAILY, WEEKLY, MONTHLY, or YEARLY.
     * 
     * @uml.property name="frequency"
     */
    private int frequency;

    /**
     * A positive integer indicating how often the specified frequency repeats.
     * For example, if frequency is daily, then an interval value of 2 indicates
     * a recurrence every two days.
     * 
     * @uml.property name="intervale"
     */
    private int intervale;

    /**
     * The end date of this recurrence or null to make the recurrence
     * indefinitely.
     * 
     * @uml.property name="until"
     */
    private Date until;

    /**
     * Getter of the property <tt>byDayDays</tt>
     * 
     * @return Returns the byDayDays.
     * @uml.property name="byDayDays"
     */

    public String[] getByDayDays() {
        return this.byDayDays;
    }

    /**
     * Getter of the property <tt>byDayFreq</tt>
     * 
     * @return Returns the byDayFreqs.
     * @uml.property name="byDayFreq"
     */
    public int[] getByDayFreqs() {
        return this.byDayFreqs;
    }

    /**
     * Getter of the property <tt>byMonth</tt>
     * 
     * @return Returns the byMonths.
     * @uml.property name="byMonth"
     */

    public int[] getByMonths() {
        return this.byMonths;
    }

    /**
     * Getter of the property <tt>byMonthDay</tt>
     * 
     * @return Returns the byMonthDay.
     * @uml.property name="byMonthDay"
     */

    public int[] getByMonthDays() {
        return this.byMonthDays;
    }

    /**
     * Getter of the property <tt>bySetPos</tt>
     * 
     * @return Returns the bySetPos.
     * @uml.property name="bySetPos"
     */
    public int[] getBySetPos() {
        return this.bySetPos;
    }

    /**
     * Getter of the property <tt>byWeekNumber</tt>
     * 
     * @return Returns the byWeekNumbers.
     * @uml.property name="byWeekNumber"
     */

    public int[] getByWeekNumbers() {
        return this.byWeekNumbers;
    }

    /**
     * Getter of the property <tt>byYearDay</tt>
     * 
     * @return Returns the byYearDays.
     * @uml.property name="byYearDay"
     */

    public int[] getByYearDays() {
        return this.byYearDays;
    }

    /**
     * Getter of the property <tt>count</tt>
     * 
     * @return Returns the count.
     * @uml.property name="count"
     */
    public int getCount() {
        return this.count;
    }

    /**
     * Getter of the property <tt>frequency</tt>
     * 
     * @return Returns the frequency.
     * @uml.property name="frequency"
     */
    public int getFrequency() {
        return this.frequency;
    }

    /**
     * Getter of the property <tt>intervale</tt>
     * 
     * @return Returns the intervale.
     * @uml.property name="intervale"
     */
    public int getIntervale() {
        return this.intervale;
    }

    /**
     * Getter of the property <tt>until</tt>
     * 
     * @return Returns the until.
     * @uml.property name="until"
     */

    public Date getUntil() {
        return this.until;
    }

    /**
     * Setter of the property <tt>byDayDays</tt>
     * 
     * @param byDayDays
     *            The byDayDays to set.
     * @uml.property name="byDayDays"
     */
    public void setByDayDays(String[] byDayDays) {
        this.byDayDays = byDayDays;
    }

    /**
     * Setter of the property <tt>byDayFreqs</tt>
     * 
     * @param byDayFreqs
     *            The byDayFreqs to set.
     * @uml.property name="byDayFreqs"
     */
    public void setByDayFreqs(int[] byDayFreqs) {
        this.byDayFreqs = byDayFreqs;
    }

    /**
     * Setter of the property <tt>byMonthDay</tt>
     * 
     * @param byMonthDay
     *            The byMonthDay to set.
     * @uml.property name="byMonthDay"
     */
    public void setByMonthDays(int[] byMonthDays) {
        this.byMonthDays = byMonthDays;
    }

    /**
     * Setter of the property <tt>byMonths</tt>
     * 
     * @param byMonths
     *            The byMonths to set.
     * @uml.property name="byMonths"
     */
    public void setByMonths(int[] byMonths) {
        this.byMonths = byMonths;
    }

    /**
     * Setter of the property <tt>bySetPos</tt>
     * 
     * @param bySetPos
     *            The bySetPos to set.
     * @uml.property name="bySetPos"
     */
    public void setBySetPos(int[] bySetPos) {
        this.bySetPos = bySetPos;
    }

    /**
     * Setter of the property <tt>byWeekNumber</tt>
     * 
     * @param byWeekNumbers
     *            The byWeekNumbers to set.
     * @uml.property name="byWeekNumbers"
     */
    public void setByWeekNumbers(int[] byWeekNumbers) {
        this.byWeekNumbers = byWeekNumbers;
    }

    /**
     * Setter of the property <tt>byYearDay</tt>
     * 
     * @param byYearDay
     *            The byYearDays to set.
     * @uml.property name="byYearDays"
     */
    public void setByYearDays(int[] byYearDay) {
        this.byYearDays = byYearDay;
    }

    /**
     * Setter of the property <tt>count</tt>
     * 
     * @param count
     *            The count to set.
     * @uml.property name="count"
     */
    public void setCount(int count) {
        this.count = count;
    }

    /**
     * Setter of the property <tt>frequency</tt>
     * 
     * @param frequency
     *            The frequency to set.
     * @uml.property name="frequency"
     */
    public void setFrequency(int frequency) {
        this.frequency = frequency;
    }

    /**
     * Setter of the property <tt>intervale</tt>
     * 
     * @param intervale
     *            The intervale to set.
     * @uml.property name="intervale"
     */
    public void setIntervale(int intervale) {
        this.intervale = intervale;
    }

    /**
     * Setter of the property <tt>until</tt>
     * 
     * @param until
     *            The until to set.
     * @uml.property name="until"
     */
    public void setUntil(Date until) {
        this.until = until;
    }

}
